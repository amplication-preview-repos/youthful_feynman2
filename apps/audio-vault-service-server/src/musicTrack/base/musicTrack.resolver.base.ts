/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MusicTrack } from "./MusicTrack";
import { MusicTrackCountArgs } from "./MusicTrackCountArgs";
import { MusicTrackFindManyArgs } from "./MusicTrackFindManyArgs";
import { MusicTrackFindUniqueArgs } from "./MusicTrackFindUniqueArgs";
import { CreateMusicTrackArgs } from "./CreateMusicTrackArgs";
import { UpdateMusicTrackArgs } from "./UpdateMusicTrackArgs";
import { DeleteMusicTrackArgs } from "./DeleteMusicTrackArgs";
import { MusicTrackService } from "../musicTrack.service";
@graphql.Resolver(() => MusicTrack)
export class MusicTrackResolverBase {
  constructor(protected readonly service: MusicTrackService) {}

  async _musicTracksMeta(
    @graphql.Args() args: MusicTrackCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MusicTrack])
  async musicTracks(
    @graphql.Args() args: MusicTrackFindManyArgs
  ): Promise<MusicTrack[]> {
    return this.service.musicTracks(args);
  }

  @graphql.Query(() => MusicTrack, { nullable: true })
  async musicTrack(
    @graphql.Args() args: MusicTrackFindUniqueArgs
  ): Promise<MusicTrack | null> {
    const result = await this.service.musicTrack(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MusicTrack)
  async createMusicTrack(
    @graphql.Args() args: CreateMusicTrackArgs
  ): Promise<MusicTrack> {
    return await this.service.createMusicTrack({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MusicTrack)
  async updateMusicTrack(
    @graphql.Args() args: UpdateMusicTrackArgs
  ): Promise<MusicTrack | null> {
    try {
      return await this.service.updateMusicTrack({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MusicTrack)
  async deleteMusicTrack(
    @graphql.Args() args: DeleteMusicTrackArgs
  ): Promise<MusicTrack | null> {
    try {
      return await this.service.deleteMusicTrack(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

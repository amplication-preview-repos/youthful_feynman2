/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LicenseAgreement as PrismaLicenseAgreement,
  Developer as PrismaDeveloper,
} from "@prisma/client";

export class LicenseAgreementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LicenseAgreementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.licenseAgreement.count(args);
  }

  async licenseAgreements(
    args: Prisma.LicenseAgreementFindManyArgs
  ): Promise<PrismaLicenseAgreement[]> {
    return this.prisma.licenseAgreement.findMany(args);
  }
  async licenseAgreement(
    args: Prisma.LicenseAgreementFindUniqueArgs
  ): Promise<PrismaLicenseAgreement | null> {
    return this.prisma.licenseAgreement.findUnique(args);
  }
  async createLicenseAgreement(
    args: Prisma.LicenseAgreementCreateArgs
  ): Promise<PrismaLicenseAgreement> {
    return this.prisma.licenseAgreement.create(args);
  }
  async updateLicenseAgreement(
    args: Prisma.LicenseAgreementUpdateArgs
  ): Promise<PrismaLicenseAgreement> {
    return this.prisma.licenseAgreement.update(args);
  }
  async deleteLicenseAgreement(
    args: Prisma.LicenseAgreementDeleteArgs
  ): Promise<PrismaLicenseAgreement> {
    return this.prisma.licenseAgreement.delete(args);
  }

  async getDeveloper(parentId: string): Promise<PrismaDeveloper | null> {
    return this.prisma.licenseAgreement
      .findUnique({
        where: { id: parentId },
      })
      .developer();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LicenseAgreement } from "./LicenseAgreement";
import { LicenseAgreementCountArgs } from "./LicenseAgreementCountArgs";
import { LicenseAgreementFindManyArgs } from "./LicenseAgreementFindManyArgs";
import { LicenseAgreementFindUniqueArgs } from "./LicenseAgreementFindUniqueArgs";
import { CreateLicenseAgreementArgs } from "./CreateLicenseAgreementArgs";
import { UpdateLicenseAgreementArgs } from "./UpdateLicenseAgreementArgs";
import { DeleteLicenseAgreementArgs } from "./DeleteLicenseAgreementArgs";
import { Developer } from "../../developer/base/Developer";
import { LicenseAgreementService } from "../licenseAgreement.service";
@graphql.Resolver(() => LicenseAgreement)
export class LicenseAgreementResolverBase {
  constructor(protected readonly service: LicenseAgreementService) {}

  async _licenseAgreementsMeta(
    @graphql.Args() args: LicenseAgreementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LicenseAgreement])
  async licenseAgreements(
    @graphql.Args() args: LicenseAgreementFindManyArgs
  ): Promise<LicenseAgreement[]> {
    return this.service.licenseAgreements(args);
  }

  @graphql.Query(() => LicenseAgreement, { nullable: true })
  async licenseAgreement(
    @graphql.Args() args: LicenseAgreementFindUniqueArgs
  ): Promise<LicenseAgreement | null> {
    const result = await this.service.licenseAgreement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LicenseAgreement)
  async createLicenseAgreement(
    @graphql.Args() args: CreateLicenseAgreementArgs
  ): Promise<LicenseAgreement> {
    return await this.service.createLicenseAgreement({
      ...args,
      data: {
        ...args.data,

        developer: args.data.developer
          ? {
              connect: args.data.developer,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LicenseAgreement)
  async updateLicenseAgreement(
    @graphql.Args() args: UpdateLicenseAgreementArgs
  ): Promise<LicenseAgreement | null> {
    try {
      return await this.service.updateLicenseAgreement({
        ...args,
        data: {
          ...args.data,

          developer: args.data.developer
            ? {
                connect: args.data.developer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LicenseAgreement)
  async deleteLicenseAgreement(
    @graphql.Args() args: DeleteLicenseAgreementArgs
  ): Promise<LicenseAgreement | null> {
    try {
      return await this.service.deleteLicenseAgreement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Developer, {
    nullable: true,
    name: "developer",
  })
  async getDeveloper(
    @graphql.Parent() parent: LicenseAgreement
  ): Promise<Developer | null> {
    const result = await this.service.getDeveloper(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

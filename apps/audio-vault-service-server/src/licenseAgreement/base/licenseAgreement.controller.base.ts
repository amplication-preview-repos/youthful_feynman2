/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LicenseAgreementService } from "../licenseAgreement.service";
import { LicenseAgreementCreateInput } from "./LicenseAgreementCreateInput";
import { LicenseAgreement } from "./LicenseAgreement";
import { LicenseAgreementFindManyArgs } from "./LicenseAgreementFindManyArgs";
import { LicenseAgreementWhereUniqueInput } from "./LicenseAgreementWhereUniqueInput";
import { LicenseAgreementUpdateInput } from "./LicenseAgreementUpdateInput";

export class LicenseAgreementControllerBase {
  constructor(protected readonly service: LicenseAgreementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LicenseAgreement })
  async createLicenseAgreement(
    @common.Body() data: LicenseAgreementCreateInput
  ): Promise<LicenseAgreement> {
    return await this.service.createLicenseAgreement({
      data: {
        ...data,

        developer: data.developer
          ? {
              connect: data.developer,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        developer: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        startDate: true,
        terms: true,
        track: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LicenseAgreement] })
  @ApiNestedQuery(LicenseAgreementFindManyArgs)
  async licenseAgreements(
    @common.Req() request: Request
  ): Promise<LicenseAgreement[]> {
    const args = plainToClass(LicenseAgreementFindManyArgs, request.query);
    return this.service.licenseAgreements({
      ...args,
      select: {
        createdAt: true,

        developer: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        startDate: true,
        terms: true,
        track: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LicenseAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async licenseAgreement(
    @common.Param() params: LicenseAgreementWhereUniqueInput
  ): Promise<LicenseAgreement | null> {
    const result = await this.service.licenseAgreement({
      where: params,
      select: {
        createdAt: true,

        developer: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        startDate: true,
        terms: true,
        track: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LicenseAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLicenseAgreement(
    @common.Param() params: LicenseAgreementWhereUniqueInput,
    @common.Body() data: LicenseAgreementUpdateInput
  ): Promise<LicenseAgreement | null> {
    try {
      return await this.service.updateLicenseAgreement({
        where: params,
        data: {
          ...data,

          developer: data.developer
            ? {
                connect: data.developer,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          developer: {
            select: {
              id: true,
            },
          },

          endDate: true,
          id: true,
          startDate: true,
          terms: true,
          track: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LicenseAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLicenseAgreement(
    @common.Param() params: LicenseAgreementWhereUniqueInput
  ): Promise<LicenseAgreement | null> {
    try {
      return await this.service.deleteLicenseAgreement({
        where: params,
        select: {
          createdAt: true,

          developer: {
            select: {
              id: true,
            },
          },

          endDate: true,
          id: true,
          startDate: true,
          terms: true,
          track: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ContentPublisher as PrismaContentPublisher,
} from "@prisma/client";

export class ContentPublisherServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContentPublisherCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contentPublisher.count(args);
  }

  async contentPublishers(
    args: Prisma.ContentPublisherFindManyArgs
  ): Promise<PrismaContentPublisher[]> {
    return this.prisma.contentPublisher.findMany(args);
  }
  async contentPublisher(
    args: Prisma.ContentPublisherFindUniqueArgs
  ): Promise<PrismaContentPublisher | null> {
    return this.prisma.contentPublisher.findUnique(args);
  }
  async createContentPublisher(
    args: Prisma.ContentPublisherCreateArgs
  ): Promise<PrismaContentPublisher> {
    return this.prisma.contentPublisher.create(args);
  }
  async updateContentPublisher(
    args: Prisma.ContentPublisherUpdateArgs
  ): Promise<PrismaContentPublisher> {
    return this.prisma.contentPublisher.update(args);
  }
  async deleteContentPublisher(
    args: Prisma.ContentPublisherDeleteArgs
  ): Promise<PrismaContentPublisher> {
    return this.prisma.contentPublisher.delete(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContentPublisher } from "./ContentPublisher";
import { ContentPublisherCountArgs } from "./ContentPublisherCountArgs";
import { ContentPublisherFindManyArgs } from "./ContentPublisherFindManyArgs";
import { ContentPublisherFindUniqueArgs } from "./ContentPublisherFindUniqueArgs";
import { CreateContentPublisherArgs } from "./CreateContentPublisherArgs";
import { UpdateContentPublisherArgs } from "./UpdateContentPublisherArgs";
import { DeleteContentPublisherArgs } from "./DeleteContentPublisherArgs";
import { ContentPublisherService } from "../contentPublisher.service";
@graphql.Resolver(() => ContentPublisher)
export class ContentPublisherResolverBase {
  constructor(protected readonly service: ContentPublisherService) {}

  async _contentPublishersMeta(
    @graphql.Args() args: ContentPublisherCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContentPublisher])
  async contentPublishers(
    @graphql.Args() args: ContentPublisherFindManyArgs
  ): Promise<ContentPublisher[]> {
    return this.service.contentPublishers(args);
  }

  @graphql.Query(() => ContentPublisher, { nullable: true })
  async contentPublisher(
    @graphql.Args() args: ContentPublisherFindUniqueArgs
  ): Promise<ContentPublisher | null> {
    const result = await this.service.contentPublisher(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContentPublisher)
  async createContentPublisher(
    @graphql.Args() args: CreateContentPublisherArgs
  ): Promise<ContentPublisher> {
    return await this.service.createContentPublisher({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContentPublisher)
  async updateContentPublisher(
    @graphql.Args() args: UpdateContentPublisherArgs
  ): Promise<ContentPublisher | null> {
    try {
      return await this.service.updateContentPublisher({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContentPublisher)
  async deleteContentPublisher(
    @graphql.Args() args: DeleteContentPublisherArgs
  ): Promise<ContentPublisher | null> {
    try {
      return await this.service.deleteContentPublisher(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

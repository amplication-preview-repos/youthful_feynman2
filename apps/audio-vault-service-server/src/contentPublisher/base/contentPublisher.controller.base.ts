/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContentPublisherService } from "../contentPublisher.service";
import { ContentPublisherCreateInput } from "./ContentPublisherCreateInput";
import { ContentPublisher } from "./ContentPublisher";
import { ContentPublisherFindManyArgs } from "./ContentPublisherFindManyArgs";
import { ContentPublisherWhereUniqueInput } from "./ContentPublisherWhereUniqueInput";
import { ContentPublisherUpdateInput } from "./ContentPublisherUpdateInput";

export class ContentPublisherControllerBase {
  constructor(protected readonly service: ContentPublisherService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContentPublisher })
  async createContentPublisher(
    @common.Body() data: ContentPublisherCreateInput
  ): Promise<ContentPublisher> {
    return await this.service.createContentPublisher({
      data: data,
      select: {
        catalogEndpoint: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContentPublisher] })
  @ApiNestedQuery(ContentPublisherFindManyArgs)
  async contentPublishers(
    @common.Req() request: Request
  ): Promise<ContentPublisher[]> {
    const args = plainToClass(ContentPublisherFindManyArgs, request.query);
    return this.service.contentPublishers({
      ...args,
      select: {
        catalogEndpoint: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContentPublisher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contentPublisher(
    @common.Param() params: ContentPublisherWhereUniqueInput
  ): Promise<ContentPublisher | null> {
    const result = await this.service.contentPublisher({
      where: params,
      select: {
        catalogEndpoint: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContentPublisher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContentPublisher(
    @common.Param() params: ContentPublisherWhereUniqueInput,
    @common.Body() data: ContentPublisherUpdateInput
  ): Promise<ContentPublisher | null> {
    try {
      return await this.service.updateContentPublisher({
        where: params,
        data: data,
        select: {
          catalogEndpoint: true,
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContentPublisher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContentPublisher(
    @common.Param() params: ContentPublisherWhereUniqueInput
  ): Promise<ContentPublisher | null> {
    try {
      return await this.service.deleteContentPublisher({
        where: params,
        select: {
          catalogEndpoint: true,
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ApiUsage as PrismaApiUsage,
  Developer as PrismaDeveloper,
} from "@prisma/client";

export class ApiUsageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ApiUsageCountArgs, "select">): Promise<number> {
    return this.prisma.apiUsage.count(args);
  }

  async apiUsages(
    args: Prisma.ApiUsageFindManyArgs
  ): Promise<PrismaApiUsage[]> {
    return this.prisma.apiUsage.findMany(args);
  }
  async apiUsage(
    args: Prisma.ApiUsageFindUniqueArgs
  ): Promise<PrismaApiUsage | null> {
    return this.prisma.apiUsage.findUnique(args);
  }
  async createApiUsage(
    args: Prisma.ApiUsageCreateArgs
  ): Promise<PrismaApiUsage> {
    return this.prisma.apiUsage.create(args);
  }
  async updateApiUsage(
    args: Prisma.ApiUsageUpdateArgs
  ): Promise<PrismaApiUsage> {
    return this.prisma.apiUsage.update(args);
  }
  async deleteApiUsage(
    args: Prisma.ApiUsageDeleteArgs
  ): Promise<PrismaApiUsage> {
    return this.prisma.apiUsage.delete(args);
  }

  async getDeveloper(parentId: string): Promise<PrismaDeveloper | null> {
    return this.prisma.apiUsage
      .findUnique({
        where: { id: parentId },
      })
      .developer();
  }
}

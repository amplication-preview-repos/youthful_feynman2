/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApiUsage } from "./ApiUsage";
import { ApiUsageCountArgs } from "./ApiUsageCountArgs";
import { ApiUsageFindManyArgs } from "./ApiUsageFindManyArgs";
import { ApiUsageFindUniqueArgs } from "./ApiUsageFindUniqueArgs";
import { CreateApiUsageArgs } from "./CreateApiUsageArgs";
import { UpdateApiUsageArgs } from "./UpdateApiUsageArgs";
import { DeleteApiUsageArgs } from "./DeleteApiUsageArgs";
import { Developer } from "../../developer/base/Developer";
import { ApiUsageService } from "../apiUsage.service";
@graphql.Resolver(() => ApiUsage)
export class ApiUsageResolverBase {
  constructor(protected readonly service: ApiUsageService) {}

  async _apiUsagesMeta(
    @graphql.Args() args: ApiUsageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApiUsage])
  async apiUsages(
    @graphql.Args() args: ApiUsageFindManyArgs
  ): Promise<ApiUsage[]> {
    return this.service.apiUsages(args);
  }

  @graphql.Query(() => ApiUsage, { nullable: true })
  async apiUsage(
    @graphql.Args() args: ApiUsageFindUniqueArgs
  ): Promise<ApiUsage | null> {
    const result = await this.service.apiUsage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApiUsage)
  async createApiUsage(
    @graphql.Args() args: CreateApiUsageArgs
  ): Promise<ApiUsage> {
    return await this.service.createApiUsage({
      ...args,
      data: {
        ...args.data,

        developer: args.data.developer
          ? {
              connect: args.data.developer,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ApiUsage)
  async updateApiUsage(
    @graphql.Args() args: UpdateApiUsageArgs
  ): Promise<ApiUsage | null> {
    try {
      return await this.service.updateApiUsage({
        ...args,
        data: {
          ...args.data,

          developer: args.data.developer
            ? {
                connect: args.data.developer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApiUsage)
  async deleteApiUsage(
    @graphql.Args() args: DeleteApiUsageArgs
  ): Promise<ApiUsage | null> {
    try {
      return await this.service.deleteApiUsage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Developer, {
    nullable: true,
    name: "developer",
  })
  async getDeveloper(
    @graphql.Parent() parent: ApiUsage
  ): Promise<Developer | null> {
    const result = await this.service.getDeveloper(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

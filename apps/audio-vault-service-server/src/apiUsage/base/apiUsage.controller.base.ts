/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApiUsageService } from "../apiUsage.service";
import { ApiUsageCreateInput } from "./ApiUsageCreateInput";
import { ApiUsage } from "./ApiUsage";
import { ApiUsageFindManyArgs } from "./ApiUsageFindManyArgs";
import { ApiUsageWhereUniqueInput } from "./ApiUsageWhereUniqueInput";
import { ApiUsageUpdateInput } from "./ApiUsageUpdateInput";

export class ApiUsageControllerBase {
  constructor(protected readonly service: ApiUsageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApiUsage })
  async createApiUsage(
    @common.Body() data: ApiUsageCreateInput
  ): Promise<ApiUsage> {
    return await this.service.createApiUsage({
      data: {
        ...data,

        developer: data.developer
          ? {
              connect: data.developer,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        developer: {
          select: {
            id: true,
          },
        },

        endpoint: true,
        id: true,
        requestTimestamp: true,
        responseStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApiUsage] })
  @ApiNestedQuery(ApiUsageFindManyArgs)
  async apiUsages(@common.Req() request: Request): Promise<ApiUsage[]> {
    const args = plainToClass(ApiUsageFindManyArgs, request.query);
    return this.service.apiUsages({
      ...args,
      select: {
        createdAt: true,

        developer: {
          select: {
            id: true,
          },
        },

        endpoint: true,
        id: true,
        requestTimestamp: true,
        responseStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApiUsage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async apiUsage(
    @common.Param() params: ApiUsageWhereUniqueInput
  ): Promise<ApiUsage | null> {
    const result = await this.service.apiUsage({
      where: params,
      select: {
        createdAt: true,

        developer: {
          select: {
            id: true,
          },
        },

        endpoint: true,
        id: true,
        requestTimestamp: true,
        responseStatus: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApiUsage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApiUsage(
    @common.Param() params: ApiUsageWhereUniqueInput,
    @common.Body() data: ApiUsageUpdateInput
  ): Promise<ApiUsage | null> {
    try {
      return await this.service.updateApiUsage({
        where: params,
        data: {
          ...data,

          developer: data.developer
            ? {
                connect: data.developer,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          developer: {
            select: {
              id: true,
            },
          },

          endpoint: true,
          id: true,
          requestTimestamp: true,
          responseStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApiUsage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApiUsage(
    @common.Param() params: ApiUsageWhereUniqueInput
  ): Promise<ApiUsage | null> {
    try {
      return await this.service.deleteApiUsage({
        where: params,
        select: {
          createdAt: true,

          developer: {
            select: {
              id: true,
            },
          },

          endpoint: true,
          id: true,
          requestTimestamp: true,
          responseStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
